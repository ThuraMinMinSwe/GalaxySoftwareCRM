@page "/customerspage"
@using GalaxySoftwareCRM.Shared
@using GalaxySoftwareCRM.Client.Services
@using GalaxySoftwareCRM.Client.Components 
@using NpgsqlTypes
@inject IDataService service
@inject ActionService actionservice
@inject FilterService filterservice
@inject IDialogService DialogService
@*@inject HttpClient Http*@



<PageTitle>Customer</PageTitle>

<h1>Customer Pages</h1>

<p>This component demonstrates fetching data from the server.</p>


@if (customerlist == null)
{
    <ProgressRing/>
}
else
{
       <MudTable  Items="@customerlist" Hover="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>ShortDesc</MudTh>
            <MudTh>Contact</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.name</MudTd>
            <MudTd DataLabel="ShortDesc">@context.shortdesc</MudTd>
            <MudTd DataLabel="Contact">@context.contact</MudTd>
        </RowTemplate>
         <PagerContent>
            <MudTablePager />
        </PagerContent>
        </MudTable>
        
}       
        
       
@code {
    private IEnumerable<Customer>? customerlist;




    protected override async Task OnInitializedAsync()
    {
        actionservice.AddNewAction = AddCustomerNewExecute;
        actionservice.FilterAction = ShowFilterActionExecute;
        filterservice.RequeryCommand = RequeryByFilterExecute;

        await GetData();

    }

    private async void RequeryByFilterExecute()
    {
        await GetData(-9,filterservice.SelectedTownshipId, filterservice.SelectedCustomerGroupId);
        StateHasChanged();
    }

    private void ShowFilterActionExecute()
    {
        filterservice.IsTownshipVisible = false;
        filterservice.IsCustomerVisible = true;
        filterservice.IsCustomerGroupVisible = true;

        filterservice.FilterVisibilityCommand.Invoke();

    }

    private async void AddCustomerNewExecute()
    {
        var options = new DialogOptions() { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Large  };

        await DialogService.Show<DialogPopupComponent>("Customer Setup", options ).Result;

        await GetData();
        StateHasChanged();
    }

    private async Task GetData(int? _customerid =-9,int? _townshipid =-9,int? _custgroupid =-9)
    {
        List<ParameterHelper>? parameters = new()
        {
            new ParameterHelper{ PsqlDbTypes = NpgsqlDbType.Integer, PsqlParameterName = "_customerid", PsqlParameterValue = _customerid ?? -9, PsqlParameterDirection = System.Data.ParameterDirection.Input},
            new ParameterHelper { PsqlDbTypes = NpgsqlDbType.Integer, PsqlParameterName = "_townshipid", PsqlParameterValue = _townshipid ?? -9, PsqlParameterDirection = System.Data.ParameterDirection.Input },
            new ParameterHelper { PsqlDbTypes = NpgsqlDbType.Integer, PsqlParameterName = "_custgroupid", PsqlParameterValue = _custgroupid ?? -9, PsqlParameterDirection = System.Data.ParameterDirection.Input }
    };

        ApiHelper apiHelper = new ApiHelper { IsStoredProcedure = true, StoredProcedureName = "usp_getcustomerinfo", Parameters = parameters, SqlExecutionType = SqlExecutionTypes.ExecuteResult };

        customerlist = (await service.GetDataByProcedure<Customer>(apiHelper));

        

    }
}
